// Code generated by Microsoft (R) AutoRest Code Generator 0.9.6.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using CATest.AOL.RESTAPI;
using Microsoft.Rest;

namespace CATest.AOL.RESTAPI
{
    public static partial class ArticleExtensions
    {
        /// <param name='operations'>
        /// Reference to the CATest.AOL.RESTAPI.IArticle.
        /// </param>
        public static string CreateImage(this IArticle operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArticle)s).CreateImageAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CATest.AOL.RESTAPI.IArticle.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> CreateImageAsync(this IArticle operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.CreateImageWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the CATest.AOL.RESTAPI.IArticle.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        public static string GetArticle(this IArticle operations, string code)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArticle)s).GetArticleAsync(code);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CATest.AOL.RESTAPI.IArticle.
        /// </param>
        /// <param name='code'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetArticleAsync(this IArticle operations, string code, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetArticleWithOperationResponseAsync(code, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the CATest.AOL.RESTAPI.IArticle.
        /// </param>
        public static string GetArticles(this IArticle operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IArticle)s).GetArticlesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the CATest.AOL.RESTAPI.IArticle.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetArticlesAsync(this IArticle operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetArticlesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
